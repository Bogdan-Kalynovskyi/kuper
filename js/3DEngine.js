var DisplayObject3D = function () {    return this;};DisplayObject3D.prototype._x = 0;DisplayObject3D.prototype._y = 0;//Create 3d PointsDisplayObject3D.prototype.make3DPoint = function (x, y, z) {    var point = {};    point.x = x;    point.y = y;    point.z = z;    return point;};//Create 2d PointsDisplayObject3D.prototype.make2DPoint = function (x, y, depth, scaleFactor) {    var point = {};    point.x = x;    point.y = y;    point.depth = depth;    point.scaleFactor = scaleFactor;    return point;};DisplayObject3D.prototype.container = undefined;DisplayObject3D.prototype.pointsArray = [];DisplayObject3D.prototype.init = function (container) {    this.container = $(container);    this.containerId = this.container.attr("id");};/* * DisplayObject3D End ---------------------------------------------- *//* * Camera3D ---------------------------------------------- */var Camera3D = function () {};Camera3D.prototype.x = 0;Camera3D.prototype.y = 0;Camera3D.prototype.z = 500;//TODO DELETE Z, what is z&?Camera3D.prototype.focalLength = 100;Camera3D.prototype.scaleRatio = function (item) {    return this.focalLength / (this.focalLength + item.z - this.z);};Camera3D.prototype.init = function (x, y, z, focalLength) {    this.x = x;    this.y = y;    this.z = z;    this.focalLength = focalLength;};/* * Camera3D End ---------------------------------------------- *//* * Object3D ---------------------------------------------- */var Object3D = function (container) {    this.container = $(container);};Object3D.prototype.objects = [];Object3D.prototype.addChild = function (object3D) {    this.objects.push(object3D);    object3D.init(this.container);    return object3D;};/* * Object3D End ---------------------------------------------- *//* * Scene3D ---------------------------------------------- */var Scene3D = function () {};Scene3D.prototype.sceneItems = [];Scene3D.prototype.addToScene = function (object) {    this.sceneItems.push(object);};Scene3D.prototype.Transform3DPointsTo2DPoints = function (points, axisRotations, camera) {    var TransformedPointsArray = [];    var sx = Math.sin(axisRotations.x);    var cx = Math.cos(axisRotations.x);    var sy = Math.sin(axisRotations.y);    var cy = Math.cos(axisRotations.y);    var sz = Math.sin(axisRotations.z);    var cz = Math.cos(axisRotations.z);    var x, y, z, xy, xz, yx, yz, zx, zy, scaleFactor;    var i = points.length;    while (i--) {        x = points[i].x;        y = points[i].y;        z = points[i].z;        // rotation around x        xy = cx * y - sx * z;        xz = sx * y + cx * z;        // rotation around y        yz = cy * xz - sy * x;        yx = sy * xz + cy * x;        // rotation around z        zx = cz * yx - sz * xy;        zy = sz * yx + cz * xy;        scaleFactor = camera.focalLength / (camera.focalLength + yz);        x = zx * scaleFactor;        y = zy * scaleFactor;        z = yz;        var displayObject = new DisplayObject3D();        TransformedPointsArray[i] = displayObject.make2DPoint(x, y, -z, scaleFactor);    }    return TransformedPointsArray;};Scene3D.prototype.renderCamera = function (camera) {    for (var i = 0; i < this.sceneItems.length; i++) {        var obj = this.sceneItems[i].objects[0];        var screenPoints = this.Transform3DPointsTo2DPoints(obj.pointsArray, axisRotation, camera);        for (k = 0; k < obj.pointsArray.length; k++) {            var iii = null;            iii = document.getElementById(obj.containerId).getElementsByTagName("ul")[0].getElementsByTagName("li")[k];            if (iii) {                iii._x = screenPoints[k].x;                iii._y = screenPoints[k].y;                var cs = iii.scale = screenPoints[k].scaleFactor;                var ___1 = iii.childNodes[0].childNodes[0];                var ___2 = iii.childNodes[0].childNodes[1];                var smalify = 1.1 * cs - .2;                var he = parseInt(___1.style.width = 107 * smalify + 'px');                var wi = parseInt(___1.style.height = 75 * smalify + 'px');                iii.style.top = iii._y + 85 - he / 2 + 'px';                iii.style.left = iii._x * screenFactor - wi / 2 + 'px';                ___1.style.borderWidth = 1.5 * cs + 'px';                if (___2) {                    ___2.style.fontSize = 28 * cs + '%';                }                iii.style.opacity = Math.min(1, cs - .1);                iii.style.zIndex = Math.round(cs * 600);//currItem.childNodes[1].innerHTML = cs;//0.6 - 1.7            }        }    }};/* * Scene3D End ---------------------------------------------- *///Center for rotationvar axisRotation = new DisplayObject3D().make3DPoint(0, 0, 0);